/* tslint:disable */
/* eslint-disable */
/**
 * Ms Commentlike API
 * Ms Commentlike API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { LikeDTO } from '../model';
// @ts-ignore
import type { LikeWithRedisUserDTO } from '../model';
/**
 * LikeResourceApi - axios parameter creator
 * @export
 */
export const LikeResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} parentId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkLikeExists: async (parentId: string, userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('checkLikeExists', 'parentId', parentId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('checkLikeExists', 'userId', userId)
            const localVarPath = `/api/likes/exists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (parentId !== undefined) {
                localVarQueryParameter['parentId'] = parentId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} parentId 
         * @param {string} parentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countByParentIdAndParentType: async (parentId: string, parentType: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('countByParentIdAndParentType', 'parentId', parentId)
            // verify required parameter 'parentType' is not null or undefined
            assertParamExists('countByParentIdAndParentType', 'parentType', parentType)
            const localVarPath = `/api/likes/countByParentIdAndParentType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (parentId !== undefined) {
                localVarQueryParameter['parentId'] = parentId;
            }

            if (parentType !== undefined) {
                localVarQueryParameter['parentType'] = parentType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} parentIds 
         * @param {string} parentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countLikesParentIdsAndParentType: async (parentIds: Array<string>, parentType: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentIds' is not null or undefined
            assertParamExists('countLikesParentIdsAndParentType', 'parentIds', parentIds)
            // verify required parameter 'parentType' is not null or undefined
            assertParamExists('countLikesParentIdsAndParentType', 'parentType', parentType)
            const localVarPath = `/api/likes/countLikesParentIdsAndParentType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (parentIds) {
                localVarQueryParameter['parentIds'] = parentIds;
            }

            if (parentType !== undefined) {
                localVarQueryParameter['parentType'] = parentType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LikeDTO} likeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLike: async (likeDTO: LikeDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'likeDTO' is not null or undefined
            assertParamExists('createLike', 'likeDTO', likeDTO)
            const localVarPath = `/api/likes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(likeDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLike: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteLike', 'id', id)
            const localVarPath = `/api/likes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} parentId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLikeByParentIdAndUserId: async (parentId: string, userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('deleteLikeByParentIdAndUserId', 'parentId', parentId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteLikeByParentIdAndUserId', 'userId', userId)
            const localVarPath = `/api/likes/by-parent-and-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (parentId !== undefined) {
                localVarQueryParameter['parentId'] = parentId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLikes: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/likes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLike: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLike', 'id', id)
            const localVarPath = `/api/likes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} parentId 
         * @param {string} parentType 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLikesByParent: async (parentId: string, parentType: string, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('getLikesByParent', 'parentId', parentId)
            // verify required parameter 'parentType' is not null or undefined
            assertParamExists('getLikesByParent', 'parentType', parentType)
            const localVarPath = `/api/likes/by-parent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (parentId !== undefined) {
                localVarQueryParameter['parentId'] = parentId;
            }

            if (parentType !== undefined) {
                localVarQueryParameter['parentType'] = parentType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {LikeDTO} likeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateLike: async (id: string, likeDTO: LikeDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateLike', 'id', id)
            // verify required parameter 'likeDTO' is not null or undefined
            assertParamExists('partialUpdateLike', 'likeDTO', likeDTO)
            const localVarPath = `/api/likes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(likeDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {LikeDTO} likeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLike: async (id: string, likeDTO: LikeDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateLike', 'id', id)
            // verify required parameter 'likeDTO' is not null or undefined
            assertParamExists('updateLike', 'likeDTO', likeDTO)
            const localVarPath = `/api/likes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(likeDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LikeResourceApi - functional programming interface
 * @export
 */
export const LikeResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LikeResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} parentId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkLikeExists(parentId: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkLikeExists(parentId, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LikeResourceApi.checkLikeExists']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} parentId 
         * @param {string} parentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countByParentIdAndParentType(parentId: string, parentType: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countByParentIdAndParentType(parentId, parentType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LikeResourceApi.countByParentIdAndParentType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<string>} parentIds 
         * @param {string} parentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countLikesParentIdsAndParentType(parentIds: Array<string>, parentType: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countLikesParentIdsAndParentType(parentIds, parentType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LikeResourceApi.countLikesParentIdsAndParentType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LikeDTO} likeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLike(likeDTO: LikeDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LikeDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLike(likeDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LikeResourceApi.createLike']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLike(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLike(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LikeResourceApi.deleteLike']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} parentId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLikeByParentIdAndUserId(parentId: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLikeByParentIdAndUserId(parentId, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LikeResourceApi.deleteLikeByParentIdAndUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllLikes(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LikeDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllLikes(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LikeResourceApi.getAllLikes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLike(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LikeDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLike(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LikeResourceApi.getLike']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} parentId 
         * @param {string} parentType 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLikesByParent(parentId: string, parentType: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LikeWithRedisUserDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLikesByParent(parentId, parentType, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LikeResourceApi.getLikesByParent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {LikeDTO} likeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateLike(id: string, likeDTO: LikeDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LikeDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateLike(id, likeDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LikeResourceApi.partialUpdateLike']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {LikeDTO} likeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLike(id: string, likeDTO: LikeDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LikeDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLike(id, likeDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LikeResourceApi.updateLike']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LikeResourceApi - factory interface
 * @export
 */
export const LikeResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LikeResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} parentId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkLikeExists(parentId: string, userId: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.checkLikeExists(parentId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} parentId 
         * @param {string} parentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countByParentIdAndParentType(parentId: string, parentType: string, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.countByParentIdAndParentType(parentId, parentType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<string>} parentIds 
         * @param {string} parentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countLikesParentIdsAndParentType(parentIds: Array<string>, parentType: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<number>> {
            return localVarFp.countLikesParentIdsAndParentType(parentIds, parentType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LikeDTO} likeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLike(likeDTO: LikeDTO, options?: RawAxiosRequestConfig): AxiosPromise<LikeDTO> {
            return localVarFp.createLike(likeDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLike(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteLike(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} parentId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLikeByParentIdAndUserId(parentId: string, userId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteLikeByParentIdAndUserId(parentId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLikes(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<Array<LikeDTO>> {
            return localVarFp.getAllLikes(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLike(id: string, options?: RawAxiosRequestConfig): AxiosPromise<LikeDTO> {
            return localVarFp.getLike(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} parentId 
         * @param {string} parentType 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLikesByParent(parentId: string, parentType: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<Array<LikeWithRedisUserDTO>> {
            return localVarFp.getLikesByParent(parentId, parentType, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {LikeDTO} likeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateLike(id: string, likeDTO: LikeDTO, options?: RawAxiosRequestConfig): AxiosPromise<LikeDTO> {
            return localVarFp.partialUpdateLike(id, likeDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {LikeDTO} likeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLike(id: string, likeDTO: LikeDTO, options?: RawAxiosRequestConfig): AxiosPromise<LikeDTO> {
            return localVarFp.updateLike(id, likeDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LikeResourceApi - object-oriented interface
 * @export
 * @class LikeResourceApi
 * @extends {BaseAPI}
 */
export class LikeResourceApi extends BaseAPI {
    /**
     * 
     * @param {string} parentId 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeResourceApi
     */
    public checkLikeExists(parentId: string, userId: string, options?: RawAxiosRequestConfig) {
        return LikeResourceApiFp(this.configuration).checkLikeExists(parentId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} parentId 
     * @param {string} parentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeResourceApi
     */
    public countByParentIdAndParentType(parentId: string, parentType: string, options?: RawAxiosRequestConfig) {
        return LikeResourceApiFp(this.configuration).countByParentIdAndParentType(parentId, parentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<string>} parentIds 
     * @param {string} parentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeResourceApi
     */
    public countLikesParentIdsAndParentType(parentIds: Array<string>, parentType: string, options?: RawAxiosRequestConfig) {
        return LikeResourceApiFp(this.configuration).countLikesParentIdsAndParentType(parentIds, parentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LikeDTO} likeDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeResourceApi
     */
    public createLike(likeDTO: LikeDTO, options?: RawAxiosRequestConfig) {
        return LikeResourceApiFp(this.configuration).createLike(likeDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeResourceApi
     */
    public deleteLike(id: string, options?: RawAxiosRequestConfig) {
        return LikeResourceApiFp(this.configuration).deleteLike(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} parentId 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeResourceApi
     */
    public deleteLikeByParentIdAndUserId(parentId: string, userId: string, options?: RawAxiosRequestConfig) {
        return LikeResourceApiFp(this.configuration).deleteLikeByParentIdAndUserId(parentId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeResourceApi
     */
    public getAllLikes(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return LikeResourceApiFp(this.configuration).getAllLikes(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeResourceApi
     */
    public getLike(id: string, options?: RawAxiosRequestConfig) {
        return LikeResourceApiFp(this.configuration).getLike(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} parentId 
     * @param {string} parentType 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeResourceApi
     */
    public getLikesByParent(parentId: string, parentType: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return LikeResourceApiFp(this.configuration).getLikesByParent(parentId, parentType, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {LikeDTO} likeDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeResourceApi
     */
    public partialUpdateLike(id: string, likeDTO: LikeDTO, options?: RawAxiosRequestConfig) {
        return LikeResourceApiFp(this.configuration).partialUpdateLike(id, likeDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {LikeDTO} likeDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeResourceApi
     */
    public updateLike(id: string, likeDTO: LikeDTO, options?: RawAxiosRequestConfig) {
        return LikeResourceApiFp(this.configuration).updateLike(id, likeDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

