/* tslint:disable */
/* eslint-disable */
/**
 * Ms Feed API
 * Ms Feed API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { KeycloakUserDTO } from '../model';
/**
 * KeycloakUserResourceApi - axios parameter creator
 * @export
 */
export const KeycloakUserResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {KeycloakUserDTO} keycloakUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKeycloakUser: async (keycloakUserDTO: KeycloakUserDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keycloakUserDTO' is not null or undefined
            assertParamExists('createKeycloakUser', 'keycloakUserDTO', keycloakUserDTO)
            const localVarPath = `/api/keycloak-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(keycloakUserDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKeycloakUser: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteKeycloakUser', 'id', id)
            const localVarPath = `/api/keycloak-users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllKeycloakUsers: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/keycloak-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeycloakUser: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getKeycloakUser', 'id', id)
            const localVarPath = `/api/keycloak-users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {KeycloakUserDTO} keycloakUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateKeycloakUser: async (id: string, keycloakUserDTO: KeycloakUserDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateKeycloakUser', 'id', id)
            // verify required parameter 'keycloakUserDTO' is not null or undefined
            assertParamExists('partialUpdateKeycloakUser', 'keycloakUserDTO', keycloakUserDTO)
            const localVarPath = `/api/keycloak-users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(keycloakUserDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {KeycloakUserDTO} keycloakUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateKeycloakUser: async (id: string, keycloakUserDTO: KeycloakUserDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateKeycloakUser', 'id', id)
            // verify required parameter 'keycloakUserDTO' is not null or undefined
            assertParamExists('updateKeycloakUser', 'keycloakUserDTO', keycloakUserDTO)
            const localVarPath = `/api/keycloak-users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(keycloakUserDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KeycloakUserResourceApi - functional programming interface
 * @export
 */
export const KeycloakUserResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KeycloakUserResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {KeycloakUserDTO} keycloakUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createKeycloakUser(keycloakUserDTO: KeycloakUserDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeycloakUserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createKeycloakUser(keycloakUserDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['KeycloakUserResourceApi.createKeycloakUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteKeycloakUser(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteKeycloakUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['KeycloakUserResourceApi.deleteKeycloakUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllKeycloakUsers(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KeycloakUserDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllKeycloakUsers(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['KeycloakUserResourceApi.getAllKeycloakUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKeycloakUser(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeycloakUserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKeycloakUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['KeycloakUserResourceApi.getKeycloakUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {KeycloakUserDTO} keycloakUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateKeycloakUser(id: string, keycloakUserDTO: KeycloakUserDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeycloakUserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateKeycloakUser(id, keycloakUserDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['KeycloakUserResourceApi.partialUpdateKeycloakUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {KeycloakUserDTO} keycloakUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateKeycloakUser(id: string, keycloakUserDTO: KeycloakUserDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeycloakUserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateKeycloakUser(id, keycloakUserDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['KeycloakUserResourceApi.updateKeycloakUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * KeycloakUserResourceApi - factory interface
 * @export
 */
export const KeycloakUserResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KeycloakUserResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {KeycloakUserDTO} keycloakUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKeycloakUser(keycloakUserDTO: KeycloakUserDTO, options?: RawAxiosRequestConfig): AxiosPromise<KeycloakUserDTO> {
            return localVarFp.createKeycloakUser(keycloakUserDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKeycloakUser(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteKeycloakUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllKeycloakUsers(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<Array<KeycloakUserDTO>> {
            return localVarFp.getAllKeycloakUsers(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeycloakUser(id: string, options?: RawAxiosRequestConfig): AxiosPromise<KeycloakUserDTO> {
            return localVarFp.getKeycloakUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {KeycloakUserDTO} keycloakUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateKeycloakUser(id: string, keycloakUserDTO: KeycloakUserDTO, options?: RawAxiosRequestConfig): AxiosPromise<KeycloakUserDTO> {
            return localVarFp.partialUpdateKeycloakUser(id, keycloakUserDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {KeycloakUserDTO} keycloakUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateKeycloakUser(id: string, keycloakUserDTO: KeycloakUserDTO, options?: RawAxiosRequestConfig): AxiosPromise<KeycloakUserDTO> {
            return localVarFp.updateKeycloakUser(id, keycloakUserDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * KeycloakUserResourceApi - object-oriented interface
 * @export
 * @class KeycloakUserResourceApi
 * @extends {BaseAPI}
 */
export class KeycloakUserResourceApi extends BaseAPI {
    /**
     * 
     * @param {KeycloakUserDTO} keycloakUserDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeycloakUserResourceApi
     */
    public createKeycloakUser(keycloakUserDTO: KeycloakUserDTO, options?: RawAxiosRequestConfig) {
        return KeycloakUserResourceApiFp(this.configuration).createKeycloakUser(keycloakUserDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeycloakUserResourceApi
     */
    public deleteKeycloakUser(id: string, options?: RawAxiosRequestConfig) {
        return KeycloakUserResourceApiFp(this.configuration).deleteKeycloakUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeycloakUserResourceApi
     */
    public getAllKeycloakUsers(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return KeycloakUserResourceApiFp(this.configuration).getAllKeycloakUsers(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeycloakUserResourceApi
     */
    public getKeycloakUser(id: string, options?: RawAxiosRequestConfig) {
        return KeycloakUserResourceApiFp(this.configuration).getKeycloakUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {KeycloakUserDTO} keycloakUserDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeycloakUserResourceApi
     */
    public partialUpdateKeycloakUser(id: string, keycloakUserDTO: KeycloakUserDTO, options?: RawAxiosRequestConfig) {
        return KeycloakUserResourceApiFp(this.configuration).partialUpdateKeycloakUser(id, keycloakUserDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {KeycloakUserDTO} keycloakUserDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeycloakUserResourceApi
     */
    public updateKeycloakUser(id: string, keycloakUserDTO: KeycloakUserDTO, options?: RawAxiosRequestConfig) {
        return KeycloakUserResourceApiFp(this.configuration).updateKeycloakUser(id, keycloakUserDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

