/* tslint:disable */
/* eslint-disable */
/**
 * Ms Commentlike API
 * Ms Commentlike API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { UploadVideoRequest } from '../model';
/**
 * PexelsControllerApi - axios parameter creator
 * @export
 */
export const PexelsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} imageUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAndStoreImage: async (imageUrl: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageUrl' is not null or undefined
            assertParamExists('downloadAndStoreImage', 'imageUrl', imageUrl)
            const localVarPath = `/api/pexels/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (imageUrl !== undefined) {
                localVarQueryParameter['imageUrl'] = imageUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} videoUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAndStoreVideo: async (videoUrl: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoUrl' is not null or undefined
            assertParamExists('downloadAndStoreVideo', 'videoUrl', videoUrl)
            const localVarPath = `/api/pexels/videos/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (videoUrl !== undefined) {
                localVarQueryParameter['videoUrl'] = videoUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} query 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchImages: async (query: string, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('searchImages', 'query', query)
            const localVarPath = `/api/pexels/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} query 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVideos: async (query: string, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('searchVideos', 'query', query)
            const localVarPath = `/api/pexels/videos/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} pexelsImageUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storePexelsImage: async (pexelsImageUrl: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pexelsImageUrl' is not null or undefined
            assertParamExists('storePexelsImage', 'pexelsImageUrl', pexelsImageUrl)
            const localVarPath = `/api/pexels/store`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pexelsImageUrl !== undefined) {
                localVarQueryParameter['pexelsImageUrl'] = pexelsImageUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} pexelsVideoUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storePexelsVideo: async (pexelsVideoUrl: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pexelsVideoUrl' is not null or undefined
            assertParamExists('storePexelsVideo', 'pexelsVideoUrl', pexelsVideoUrl)
            const localVarPath = `/api/pexels/videos/store`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pexelsVideoUrl !== undefined) {
                localVarQueryParameter['pexelsVideoUrl'] = pexelsVideoUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UploadVideoRequest} [uploadVideoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadImage: async (uploadVideoRequest?: UploadVideoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pexels/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadVideoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UploadVideoRequest} [uploadVideoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadVideo: async (uploadVideoRequest?: UploadVideoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pexels/videos/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadVideoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PexelsControllerApi - functional programming interface
 * @export
 */
export const PexelsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PexelsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} imageUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadAndStoreImage(imageUrl: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadAndStoreImage(imageUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PexelsControllerApi.downloadAndStoreImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} videoUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadAndStoreVideo(videoUrl: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadAndStoreVideo(videoUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PexelsControllerApi.downloadAndStoreVideo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} query 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchImages(query: string, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchImages(query, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PexelsControllerApi.searchImages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} query 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchVideos(query: string, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<{ [key: string]: object; }>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchVideos(query, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PexelsControllerApi.searchVideos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} pexelsImageUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storePexelsImage(pexelsImageUrl: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storePexelsImage(pexelsImageUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PexelsControllerApi.storePexelsImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} pexelsVideoUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storePexelsVideo(pexelsVideoUrl: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storePexelsVideo(pexelsVideoUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PexelsControllerApi.storePexelsVideo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UploadVideoRequest} [uploadVideoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadImage(uploadVideoRequest?: UploadVideoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadImage(uploadVideoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PexelsControllerApi.uploadImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UploadVideoRequest} [uploadVideoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadVideo(uploadVideoRequest?: UploadVideoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadVideo(uploadVideoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PexelsControllerApi.uploadVideo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PexelsControllerApi - factory interface
 * @export
 */
export const PexelsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PexelsControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} imageUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAndStoreImage(imageUrl: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.downloadAndStoreImage(imageUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} videoUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAndStoreVideo(videoUrl: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.downloadAndStoreVideo(videoUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} query 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchImages(query: string, perPage?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.searchImages(query, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} query 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVideos(query: string, perPage?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<{ [key: string]: object; }>> {
            return localVarFp.searchVideos(query, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} pexelsImageUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storePexelsImage(pexelsImageUrl: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.storePexelsImage(pexelsImageUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} pexelsVideoUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storePexelsVideo(pexelsVideoUrl: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.storePexelsVideo(pexelsVideoUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UploadVideoRequest} [uploadVideoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadImage(uploadVideoRequest?: UploadVideoRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.uploadImage(uploadVideoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UploadVideoRequest} [uploadVideoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadVideo(uploadVideoRequest?: UploadVideoRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.uploadVideo(uploadVideoRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PexelsControllerApi - object-oriented interface
 * @export
 * @class PexelsControllerApi
 * @extends {BaseAPI}
 */
export class PexelsControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} imageUrl 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PexelsControllerApi
     */
    public downloadAndStoreImage(imageUrl: string, options?: RawAxiosRequestConfig) {
        return PexelsControllerApiFp(this.configuration).downloadAndStoreImage(imageUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} videoUrl 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PexelsControllerApi
     */
    public downloadAndStoreVideo(videoUrl: string, options?: RawAxiosRequestConfig) {
        return PexelsControllerApiFp(this.configuration).downloadAndStoreVideo(videoUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} query 
     * @param {number} [perPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PexelsControllerApi
     */
    public searchImages(query: string, perPage?: number, options?: RawAxiosRequestConfig) {
        return PexelsControllerApiFp(this.configuration).searchImages(query, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} query 
     * @param {number} [perPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PexelsControllerApi
     */
    public searchVideos(query: string, perPage?: number, options?: RawAxiosRequestConfig) {
        return PexelsControllerApiFp(this.configuration).searchVideos(query, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} pexelsImageUrl 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PexelsControllerApi
     */
    public storePexelsImage(pexelsImageUrl: string, options?: RawAxiosRequestConfig) {
        return PexelsControllerApiFp(this.configuration).storePexelsImage(pexelsImageUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} pexelsVideoUrl 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PexelsControllerApi
     */
    public storePexelsVideo(pexelsVideoUrl: string, options?: RawAxiosRequestConfig) {
        return PexelsControllerApiFp(this.configuration).storePexelsVideo(pexelsVideoUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UploadVideoRequest} [uploadVideoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PexelsControllerApi
     */
    public uploadImage(uploadVideoRequest?: UploadVideoRequest, options?: RawAxiosRequestConfig) {
        return PexelsControllerApiFp(this.configuration).uploadImage(uploadVideoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UploadVideoRequest} [uploadVideoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PexelsControllerApi
     */
    public uploadVideo(uploadVideoRequest?: UploadVideoRequest, options?: RawAxiosRequestConfig) {
        return PexelsControllerApiFp(this.configuration).uploadVideo(uploadVideoRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

